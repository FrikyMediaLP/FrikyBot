{
  "TwitchIRC": {
    "description": "Module handling the Twitch Chat Connection. This also provides a Message Class helping Modules and Packages to access the incomming Data more easily.",
    "modules": {
      "tmi.js": "npm",
      "path": "npm",
      "nedb": "npm",
      "fs": "NodeJS Module",
      "CONSTANTS": "FrikyBot Module",
      "BTTV": "FrikyBot Module",
      "FFZ": "FrikyBot Module"
    },
    "variables": {
      "tmi": {
        "type": "Object",
        "npm": "https://www.npmjs.com/package/tmi.js",
        "description": "Official Twitch IRC Library."
      },
      "path": {
        "type": "Object",
        "npm": "https://www.npmjs.com/package/path",
        "description": "Library handling relative and absolute Paths."
      },
      "fs": {
        "type": "Object",
        "npm": "https://nodejs.org/api/fs.html",
        "description": "NodeJS internal File System."
      },
      "Datastore": {
        "type": "Object",
        "npm": "https://www.npmjs.com/package/nedb",
        "description": "Database manager."
      },
      "BTTV": {
        "type": "BTTV Module",
        "description": "BTTV API Interface."
      },
      "FFZ": {
        "type": "FFZ Module",
        "description": "FFZ API Interface."
      },
      "CONSTANTS": {
        "type": "CONSTANTS Module",
        "description": "Bot Constants used to generalize Outputs and Settings."
      }
    },
    "classes": {
      "TwitchAPI": {
        "description": "The actual Class for interfacing and Maintaining Connection to the Twitch IRC.",
        "parent": {
          "name": "ModuleBase",
          "from": {
            "name": "ModuleBase",
            "type": "FrikyBot Module"
          }
        },
        "constructor": {
          "params": [
            {
              "name": "configJSON",
              "type": "Object"
            },
            {
              "name": "logger",
              "opt": true,
              "type": "Logger.js:Logger"
            }
          ],
          "description": "Preparing the Module Datastructure."
        },
        "variables": {
          "client": {
            "type": "tmi.js:Client",
            "description": "The TMI.js Client Object that connects and handles the Twitch IRC."
          },
          "eventHandlers": {
            "type": "Array",
            "description": "Collecting all Event-Callbacks to be set when the IRC (re)connects."
          },
          "CONNECTION_LOG": {
            "type": "nedb:Datastore",
            "description": "Database storing all Connection related changes."
          },
          "Settings_LOG": {
            "type": "nedb:Datastore",
            "description": "Database storing all Settings related changes."
          },
          "STAT_MSGS_RECEIVED": {
            "type": "Number",
            "description": "Incrementing Number of received Chat Messages."
          },
          "STAT_MSGS_RECEIVED_PER_10": {
            "type": "Number",
            "description": "Incrementing Number of received Chat Messages in the last 10 Minutes."
          },
          "STAT_CONNECTION_TO": {
            "type": "Number",
            "description": "Incrementing Number of connection Timeouts."
          },
          "STAT_CONNECTION_TO_PER_10": {
            "type": "Number",
            "description": "Incrementing Number of connection Timeouts in the last 10 Minutes."
          },
          "STAT_LAST_CONNECTION_TO": {
            "type": "Number",
            "description": "Timerstamp of the last Connection Timeout."
          },
          "STAT_MINUTE_TIMER": {
            "type": "Interval",
            "description": "Inerval resetting the per 10 Stats to 0 every 10 minutes. (yeah thats not really accurate i know, but i is OKAAAY)"
          }
        },
        "functions": {
          "Init": {
            "params": [
              {
                "name": "WebInter",
                "type": "WebApp::WebInteractor"
              }
            ],
            "is-async": true,
            "description": "Setting up the Custom API, the tmi.js Client, Connecting to the Server, loading Databases and Creating Filestructures."
          },
          "SetupClient": {
            "params": [],
            "description": "Sets up the tmi.js Client with the User Information in the Config Object."
          },
          "Connect": {
            "params": [],
            "is-async": true,
            "description": "Connects to the Twitch IRC."
          },
          "Disconnect": {
            "params": [],
            "is-async": true,
            "description": "Disconnects from the Twitch IRC."
          },
          "Join": {
            "params": [],
            "is-async": true,
            "description": "Connects to the set Twitch IRC Channel."
          },
          "Part": {
            "params": [],
            "is-async": true,
            "description": "Disconnects from the current Twitch IRC Channel."
          },
          "on": {
            "params": [
              {
                "name": "eventName",
                "type": "String"
              },
              {
                "name": "callback",
                "type": "Function"
              }
            ],
            "description": "Applies the given Event-Callback to the tmi.js Client (if available) and also stored for potential reconnect."
          },
          "UpdateHandlers": {
            "params": [],
            "description": "Applies all the stored Event-Callbacks to the new tmi.js Client."
          },
          "ChangeUser": {
            "params": [
              {
                "name": "login",
                "type": "String"
              },
              {
                "name": "oauth",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Disconnects from the current Channel, sets up the new User and then tries to reconnect."
          },
          "ChangeChannel": {
            "params": [
              {
                "name": "channel",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Disconnects from the current Channel and then tries to connect to the new Channel."
          },
          "say": {
            "params": [
              {
                "name": "message",
                "type": "String"
              },
              {
                "name": "channel",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Writes a message into the given Chat Channel(default: current Channel)."
          },
          "saySync": {
            "params": [
              {
                "name": "message",
                "type": "String"
              },
              {
                "name": "channel",
                "type": "String"
              }
            ],
            "description": "Same as say, just not async."
          },
          "deleteMessage": {
            "params": [
              {
                "name": "id",
                "type": "String"
              },
              {
                "name": "channel",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Deletes a message based on its id. User needs Mod Status!"
          },
          "deleteMessageSync": {
            "params": [
              {
                "name": "id",
                "type": "String"
              },
              {
                "name": "channel",
                "type": "String"
              }
            ],
            "description": "Same as deleteMessage, just not async."
          },
          "timeout": {
            "params": [
              {
                "name": "username",
                "type": "String"
              },
              {
                "name": "length",
                "type": "Number"
              },
              {
                "name": "reason",
                "type": "String"
              },
              {
                "name": "channel",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Timeoutes a User for the given Length and reason. User needs Mod Status!"
          },
          "timeoutSync": {
            "params": [
              {
                "name": "username",
                "type": "String"
              },
              {
                "name": "length",
                "type": "Number"
              },
              {
                "name": "reason",
                "type": "String"
              },
              {
                "name": "channel",
                "type": "String"
              }
            ],
            "description": "Same as timeout, just not async."
          },
          "ban": {
            "params": [
              {
                "name": "username",
                "type": "String"
              },
              {
                "name": "reason",
                "type": "String"
              },
              {
                "name": "channel",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Bans a User for the given reason in the given Chat Channel."
          },
          "banSync": {
            "params": [
              {
                "name": "username",
                "type": "String"
              },
              {
                "name": "reason",
                "type": "String"
              },
              {
                "name": "channel",
                "type": "String"
              }
            ],
            "description": "Same as ban, just not async."
          },
          "getUsername": {
            "params": null,
            "description": "Returns the Username."
          },
          "getChannels": {
            "params": null,
            "description": "Returns the joined Chat Channels."
          },
          "getChannel": {
            "params": null,
            "description": "Returns the first joined Chat Channel."
          },
          "getOptions": {
            "params": null,
            "description": "Returns the Options used when connecting to the Twitch Chat."
          },
          "readyState": {
            "params": null,
            "description": "Returns the readyState of the IRC Connection."
          }
        },
        "API": {
          "Endpoints": [
            {
              "name": "Update User",
              "endpoint": "/api/settings/twitchirc/user",
              "description": "Change the current User connected to the IRC. This will internally disconnect and then reconnect to the last Channel.",
              "restricted": "full",
              "request": {
                "method": "POST",
                "body": {
                  "login": {
                    "type": "String",
                    "description": "Bot Username."
                  },
                  "oauth": {
                    "type": "String",
                    "description": "OAuth Login Password."
                  }
                }
              },
              "response": null
            },
            {
              "name": "Update Channel",
              "endpoint": "/api/settings/twitchirc/channel",
              "description": "Change the current Channel. Internally this will Disconnect from the old Channel and reconnenct on the new. This can leave the Bot without a connected Channel if the given Channel doesnt exist.",
              "restricted": "full",
              "request": {
                "method": "POST",
                "body": {
                  "channel": {
                    "type": "String",
                    "description": "Twitch Channel."
                  }
                }
              },
              "response": null
            },
            {
              "name": "Update Settings",
              "endpoint": "/api/settings/twitchirc/misc",
              "description": "Used for any other Settings Change of the TwitchIRC Config.",
              "restricted": "full",
              "request": {
                "method": "POST",
                "body": {
                  "[Config Settings Name]": {
                    "type": "matching the Setting",
                    "description": "Any Name in the TwitchIRC Config is valid. Remember to typematch the Value."
                  }
                }
              },
              "response": {
                "data": {
                  "type": "Object",
                  "description": "Updated Config JSON"
                }
              }
            },
            {
              "name": "Send Test Message",
              "endpoint": "/api/twitchirc/test",
              "description": "Sending a Test Message into the current Chat.",
              "restricted": "full",
              "request": null,
              "response": {
                "msg": {
                  "type": "String",
                  "description": "Returns the value 200 as a String."
                }
              }
            },
            {
              "name": "Disconnect Channel",
              "endpoint": "/api/twitchirc/disconnect",
              "description": "Disconnets the Bot from the current Chat. This does not close the IRC Connection.",
              "restricted": "full",
              "request": null,
              "response": {
                "msg": {
                  "type": "String",
                  "description": "Returns the value 200 as a String."
                }
              }
            },
            {
              "name": "Connect Channel",
              "endpoint": "/api/twitchirc/connect",
              "description": "Disconnets the Bot from the current Chat (if still connected), then reconnects.",
              "restricted": "full",
              "request": null,
              "response": {
                "msg": {
                  "type": "String",
                  "description": "Returns the value 200 as a String."
                }
              }
            }
          ]
        }
      },
      "Message": {
        "description": "Sub Class Handling Messages sent in the Twitch Chat.",
        "constructor": {
          "params": [
            {
              "name": "channel",
              "type": "String"
            },
            {
              "name": "userstate",
              "type": "Object"
            },
            {
              "name": "message",
              "type": "String"
            }
          ],
          "description": "Collects data from the Twitch IRC Message and determines the Userlevel."
        },
        "variables": {
          "message": {
            "type": "String",
            "description": "The message sent in the Twitch Chat."
          },
          "channel": {
            "type": "String",
            "description": "The Twitch Chat Channel the message was sent in."
          },
          "userstate": {
            "type": "Object",
            "description": "Extra data from the Twitch Chat message. e.g. Badges, Emotes, ..."
          },
          "userLevel": {
            "type": "String",
            "description": "The Users Userlevel based on their active badges."
          }
        },
        "functions": {
          "toString": {
            "params": null,
            "description": "Returns a short stringyfied version of the message sent in the Chat."
          },
          "toJSON": {
            "params": null,
            "description": "Returns the neccacary data combined in a JSON Object."
          },
          "checkFollow": {
            "params": [
              {
                "name": "API",
                "type": "TwitchAPI.js:TwitchAPI"
              }
            ],
            "is-async": true,
            "description": "Checks the Follow Status of the User in the Channel the message was sent in. This requieres the Twitch API!"
          },
          "getDisplayName": {
            "params": null,
            "description": "Returns the Users DisplayName, if set, otherwise it returns their Username."
          },
          "getUsername": {
            "params": null,
            "description": "Returns the Users Username."
          },
          "getUser": {
            "params": null,
            "description": "Returns the userstate."
          },
          "getUserID": {
            "params": null,
            "description": "Returns the Users ID."
          },
          "getChannel": {
            "params": null,
            "description": "Returns the Channel the message was sent in."
          },
          "getRoomID": {
            "params": null,
            "description": "Returns the RoomID the message was sent in."
          },
          "getMessage": {
            "params": null,
            "description": "Returns the message."
          },
          "getID": {
            "params": null,
            "description": "Returns the message ID."
          },
          "getTime": {
            "params": null,
            "description": "Returns the Timestamp the Message was sent."
          },
          "getEmotesSync": {
            "params": null,
            "description": "Returns the Twitch Emotes used in the Message."
          },
          "getEmotes": {
            "params": [
              {
                "name": "includeBTTV",
                "type": "Boolean"
              },
              {
                "name": "includeFFZ",
                "type": "Boolean"
              },
              {
                "name": "includeTTV",
                "type": "Boolean"
              }
            ],
            "is-async": true,
            "description": "Returns the Twitch Emotes used in the Message. Further can BTTV and FFZ Emotes be included, this might take a bit longer!"
          },
          "getMessageWithoutEmotes": {
            "params": [
              {
                "name": "keepBTTV",
                "type": "Boolean"
              },
              {
                "name": "keepFFZ",
                "type": "Boolean"
              },
              {
                "name": "keepTTV",
                "type": "Boolean"
              }
            ],
            "is-async": true,
            "description": "Removes the Emotes used in the Message and returns the remaining Text. BTTV and FFZ can also be removed, this might take a bit longer!"
          },
          "isEmoteOnly": {
            "params": null,
            "description": "Returns true, if the Message only contains Emotes, false otherwise. This checks the Twitch Internal 'emote-only' stat - this doesnt include BTTV or FFZ Emotes."
          },
          "getFFZEmotes": {
            "params": null,
            "is-async": true,
            "description": "Returns the FFZ Emotes used in the message."
          },
          "getBTTVEmotes": {
            "params": null,
            "is-async": true,
            "description": "Returns the BTTV Emotes used in the message."
          },
          "getMessageDetails": {
            "params": null,
            "description": "Returns combined data of Emotes, Msg-ID, Time and message."
          },
          "getUserLevel": {
            "params": null,
            "description": "Returns the Userlevel as a Number."
          },
          "getUserLevelAsText": {
            "params": null,
            "description": "Returns the Userlevel as a Text."
          },
          "hasBadge": {
            "params": [
              {
                "name": "badgeName",
                "type": "String"
              }
            ],
            "description": "Returns true, if the user has the given Badge currently equipped, false otherwise."
          },
          "matchUserlevel": {
            "params": [
              {
                "name": "userLevel",
                "type": "String"
              },
              {
                "name": "strictLevel",
                "type": "Number"
              }
            ],
            "description": "Returns true, if the current Userlevel matches or exceedes the given Userlevel and restrictions. </br> A StrictLevel of 0 means \"Mod Masterrace\" or Mods can do everything! </br> A StrictLevel of 1 means \"Badge Mode\" or the User must have the correct Badge equipped, Version doesnt matter! </br> A StrictLevel of 2 means \"Badge and Version Mode\" or the User must have the correct Badge equipped, Version MATTERS, but lower Versions count too! </br> A StrictLevel of 3 means \"Exact Mode\" or the User must have the correct Badge AND Version equipped, lower Version DONT COUNT!"
          }
        }
      }
    },
    "exports": {
      "TwitchIRC": "TwitchIRC",
      "Message": "Message"
    }
  }
}