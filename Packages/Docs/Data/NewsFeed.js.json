{
  "NewsFeed": {
    "description": "NewsFeed Package responsible for News and Changelogs.",
    "modules": {
      "express": "npm",
      "nedb": "npm",
      "path": "NodeJS Module"
    },
    "variables": {
      "express": {
        "type": "Express Module",
        "npm": "https://www.npmjs.com/package/express",
        "description": "Express WebApp hosting the Website and API."
      },
      "PATH": {
        "type": "Path Module",
        "description": "Path Module used for manipulating FileSystem Paths."
      },
      "PACKAGE_DETAILS": {
        "type": "Object",
        "description": "Package Details Information."
      },
      "COOKIES": {
        "type": "Object",
        "description": "Cookie Data this Package uses."
      },
      "API_ENDPOINT_PARAMETERS": {
        "type": "Object",
        "description": "Querry Parameters for each API Endpoint."
      }
    },
    "classes": {
      "NewsFeed": {
        "description": "NewsFeed Package responsible for News and Updates.",
        "parent": {
          "name": "PackageBase",
          "from": {
            "name": "PackageBase",
            "type": "FrikyBot Module"
          }
        },
        "constructor": {
          "params": [
            {
              "name": "webappinteractor",
              "type": "WebApp.js::WebAppInteractor"
            },
            {
              "name": "twitchirc",
              "type": "TwitchIRC.js:TwitchIRC"
            },
            {
              "name": "twitchapi",
              "type": "TwitchAPI.js:TwitchAPI"
            },
            {
              "name": "datacollection",
              "type": "DataCollection.js:DataCollection"
            },
            {
              "name": "logger",
              "opt": true,
              "type": "Logger.js:Logger"
            }
          ],
          "description": "Setting up Config Settings and calling the Parent contructor."
        },
        "variables": {
          "NEWS_DATABASE": {
            "type": "nedb::Datastore",
            "description": "All News Entries."
          },
          "CHANGELOG_DATABASE": {
            "type": "nedb::Datastore",
            "description": "All Changelog Entries."
          }
        },
        "functions": {
          "Init": {
            "params": [
              {
                "name": "WebInter",
                "type": "WebApp::WebInteractor"
              }
            ],
            "is-async": true,
            "description": "Setting up Package API and Datastructures."
          },
          "reload": {
            "params": null,
            "is-async": true,
            "description": "Reloads the News Data."
          },
          "LoadNews": {
            "params": null,
            "description": "Loads the News Data."
          },
          "AddNews": {
            "params": [
              {
                "name": "news_data",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Adds a new News to the Database."
          },
          "EditNews": {
            "params": [
              {
                "name": "news_data",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Edits a new News in the Database."
          },
          "RemoveNews": {
            "params": [
              {
                "name": "page",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Remove a new News from the Database based on the Page identifier."
          },
          "getNews": {
            "params": [
              {
                "name": "param",
                "type": "Object"
              },
              {
                "name": "include_scheduled",
                "type": "Boolean"
              }
            ],
            "is-async": true,
            "description": "Returns News based on the given Parameters from the Database."
          },
          "getOldestNews": {
            "params": [
              {
                "name": "param",
                "type": "Object"
              },
              {
                "name": "include_scheduled",
                "type": "Boolean"
              }
            ],
            "description": "Returns the oldest News based on the given Paramerters from the Database."
          },
          "validate": {
            "params": [
              {
                "name": "jsonData",
                "type": "Object"
              }
            ],
            "description": "Returns true, if the given News Data is valid, false otherwise."
          },
          "LoadChangelog": {
            "params": null,
            "description": "Loads the Changelog Data."
          },
          "AddChangelog": {
            "params": [
              {
                "name": "changelog_data",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Adds a new Changelog to the Database."
          },
          "EditChangelog": {
            "params": [
              {
                "name": "changelog_data",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Edits a new Changelog in the Database."
          },
          "RemoveChangelog": {
            "params": [
              {
                "name": "page",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Remove a new Changelog from the Database based on the Page identifier."
          },
          "getChangelogs": {
            "params": [
              {
                "name": "param",
                "type": "Object"
              },
              {
                "name": "include_scheduled",
                "type": "Boolean"
              }
            ],
            "is-async": true,
            "description": "Returns Changelogs based on the given Parameters from the Database."
          },
          "validateChangelog": {
            "params": [
              {
                "name": "jsonData",
                "type": "Object"
              }
            ],
            "description": "Returns true, if the given Changelog Data is valid, false otherwise."
          },
          "createNEDBQuery": {
            "params": [
              {
                "name": "dir",
                "type": "String"
              },
              {
                "name": "params",
                "type": "Object"
              }
            ],
            "description": "Creates a nedb Formatted Query verified by the 'API_ENDPOINT_PARAMETERS' at the given 'dir'."
          },
          "getNeDBTimeQuery": {
            "params": [
              {
                "name": "type",
                "type": "String"
              },
              {
                "name": "a",
                "type": "Number"
              },
              {
                "name": "b",
                "type": "Number"
              }
            ],
            "description": "Creates a nedb Formatted Query between the 2 given Timestamps. Currentply Supported Type: 'day'."
          },
          "getArrayPage": {
            "params": [
              {
                "name": "array",
                "type": "Array"
              },
              {
                "name": "pagination",
                "type": "String"
              }
            ],
            "description": "Returns the current Array slice based on the Pagination Cursor."
          },
          "getNextArrayPagination": {
            "params": [
              {
                "name": "array",
                "type": "Array"
              },
              {
                "name": "pagination",
                "type": "String"
              }
            ],
            "description": "Returns the next Array slice based on the Pagination Cursor."
          }
        },
        "API": {
          "Endpoints": [
            {
              "name": "Get News",
              "endpoint": "/api/News",
              "description": "Returns News based on the given query - Moderator also get Scheduled News.",
              "restricted": "partial",
              "request": {
                "query": {
                  "first": {
                    "type": "Number",
                    "opt": true,
                    "default": "10",
                    "description": "Number of NewsPages to Receive."
                  },
                  "id": {
                    "type": "Number",
                    "opt": true,
                    "description": "IDs of the to be returned News."
                  },
                  "page": {
                    "type": "String",
                    "opt": true,
                    "description": "Page identifiers of the News to be returned."
                  },
                  "title": {
                    "type": "String",
                    "opt": true,
                    "description": "title of the News to be returned."
                  },
                  "day": {
                    "type": "Number",
                    "opt": true,
                    "description": "Returns News from the given Day."
                  },
                  "start": {
                    "type": "Number",
                    "opt": true,
                    "description": "Returns News after from the given Date."
                  },
                  "end": {
                    "type": "Number",
                    "opt": true,
                    "description": "Returns News before from the given Date."
                  },
                  "pagination": {
                    "opt": true,
                    "type": "String",
                    "description": "Pagination String, a Cursor to the next/current/previous Dataslice."
                  }
                }
              },
              "response": {
                "News": {
                  "type": "Array",
                  "description": "Collection of the Requested NewsPages."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Get Oldest News",
              "endpoint": "/api/News/oldest",
              "description": "Returns Oldest News Pages - Moderator also get Scheduled News.",
              "request": {
                "querry": {
                  "first": {
                    "opt": true,
                    "type": "Number",
                    "default": "10",
                    "description": "Number of NewsPages to Receive."
                  },
                  "pagination": {
                    "opt": true,
                    "type": "String",
                    "description": "Pagination String, a Cursor to the next/current/previous Dataset."
                  }
                }
              },
              "response": {
                "News": {
                  "type": "Array",
                  "description": "Collection of the Requested NewsPages."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Add News",
              "endpoint": "/api/News",
              "description": "Add a new News.",
              "restricted": "full",
              "request": {
                "method": "POST",
                "body": {
                  "news_data": {
                    "type": "Object",
                    "description": "News Data to be added."
                  }
                }
              },
              "response": {
                "state": {
                  "type": "String",
                  "description": "Returns a confirmation String."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Edit News",
              "endpoint": "/api/News",
              "description": "Edit a News.",
              "restricted": "full",
              "request": {
                "method": "PUT",
                "body": {
                  "news_data": {
                    "type": "Object",
                    "description": "News Data to be editted."
                  }
                }
              },
              "response": {
                "state": {
                  "type": "String",
                  "description": "Returns a confirmation String."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Remove News",
              "endpoint": "/api/News",
              "description": "Remove a News.",
              "restricted": "full",
              "request": {
                "method": "DELETE",
                "body": {
                  "page": {
                    "type": "Object",
                    "description": "Page identifier of the News to be removed."
                  }
                }
              },
              "response": {
                "removed": {
                  "type": "Number",
                  "description": "Number of deleted News."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Get Changelogs",
              "endpoint": "/Changelog",
              "description": "Get Changelogs based on the given parameters - Moderator also get Scheduled Changelogs.",
              "restricted": "partial",
              "request": {
                "query": {
                  "first": {
                    "type": "Number",
                    "opt": true,
                    "default": "10",
                    "description": "Number of Changelogs to Receive."
                  },
                  "id": {
                    "type": "Number",
                    "opt": true,
                    "description": "IDs of the to be returned Changelogs."
                  },
                  "changelog": {
                    "type": "String",
                    "opt": true,
                    "description": "Changelog identifiers of the Changelogs to be returned."
                  },
                  "title": {
                    "type": "String",
                    "opt": true,
                    "description": "title of the Changelogs to be returned."
                  },
                  "day": {
                    "type": "Number",
                    "opt": true,
                    "description": "Returns Changelogs from the given Day."
                  },
                  "start": {
                    "type": "Number",
                    "opt": true,
                    "description": "Returns Changelogs after from the given Date."
                  },
                  "end": {
                    "type": "Number",
                    "opt": true,
                    "description": "Returns Changelogs before from the given Date."
                  },
                  "pagination": {
                    "opt": true,
                    "type": "String",
                    "description": "Pagination String, a Cursor to the next/current/previous Dataslice."
                  }
                }
              },
              "response": {
                "data": {
                  "type": "Array",
                  "description": "Returns the requested Changelogs."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Add Changelog",
              "endpoint": "/Changelog",
              "description": "Add a new Changelog.",
              "restricted": "full",
              "request": {
                "method": "POST",
                "body": {
                  "body": {
                    "type": "Object",
                    "description": "Changelog Formatted Data."
                  }
                }
              },
              "response": {
                "state": {
                  "type": "String",
                  "description": "Confirmation of sucessfull adding."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Edit Changelog",
              "endpoint": "/Changelog",
              "description": "Edit a present Changelog.",
              "restricted": "full",
              "request": {
                "method": "PUT",
                "body": {
                  "body": {
                    "type": "Object",
                    "description": "Changelog Formatted Data."
                  }
                }
              },
              "response": {
                "state": {
                  "type": "String",
                  "description": "Confirmation of sucessfull editting."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Remove Changelog",
              "endpoint": "/Changelog",
              "description": "Remove a Changelog.",
              "restricted": "full",
              "request": {
                "method": "DELETE",
                "body": {
                  "page": {
                    "type": "String",
                    "description": "Page identifier of the Changelog to be removed."
                  }
                }
              },
              "response": {
                "state": {
                  "type": "String",
                  "description": "Confirmation of sucessfull editting."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Remove Changelog",
              "endpoint": "/access",
              "description": "Checks your Authentication to be allowed to add/edit/remove News/Changelogs.",
              "restricted": "full",
              "request": null,
              "response": {
                "data": {
                  "type": "String",
                  "description": "will be 'ACCESS GRANTED'."
                }
              }
            }
          ]
        },
        "FileHosting": {
          "ROOT": "News/",
          "Routes": {
            "/newsmaker": {
              "type": "redirect",
              "restricted": "full",
              "description": "Redirects to the NewsMaker Page, when you have access to it!"
            },
            "/scripts": {
              "type": "redirect",
              "description": "Redirects to the NewsFeed Css Stylesheet."
            },
            "/styles": {
              "type": "redirect",
              "description": "Redirects to the NewsFeed Javascript Script."
            },
            "/*": {
              "type": "redirect",
              "description": "Redirects to the acutal News Pages."
            }
          }
        }
      }
    },
    "exports": {
      "NewsFeed": "NewsFeed"
    }
  }
}