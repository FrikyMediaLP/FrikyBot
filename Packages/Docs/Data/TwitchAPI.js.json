{
  "TwitchAPI": {
    "description": "Module handling the Twitch API Connection, maintaining Tokens, Scopes and Claims. Login using Twitch is also provided by an Authenticator.",
    "modules": {
      "express": "npm",
      "node-fetch": "npm",
      "jsonwebtoken": "npm",
      "jwks-rsa": "npm",
      "nedb": "npm",
      "fs": "NodeJS Module",
      "path": "NodeJS Module",
      "WebApp": "FrikyBot Module",
      "CONSTANTS": "FrikyBot Module"
    },
    "variables": {
      "express": {
        "type": "Express Module",
        "npm": "https://www.npmjs.com/package/express",
        "description": "Express WebApp hosting the Website and API."
      },
      "FETCH": {
        "type": "node-fetch Module",
        "npm": "https://www.npmjs.com/package/node-fetch",
        "description": "Javascript Fetch Method but in NodeJS."
      },
      "jwt": {
        "type": "jsonwebtoken Module",
        "npm": "https://www.npmjs.com/package/jsonwebtoken",
        "description": "Used for validating/signing JWTs sent by/to Twitch."
      },
      "jwks-rsa": {
        "type": "jwks-rsa Module",
        "npm": "https://www.npmjs.com/package/jwks-rsa",
        "description": "Used setting up the JWTs validating/signing methods based on the open Twitch URL Endpoint."
      },
      "Datastore": {
        "type": "Object",
        "npm": "https://www.npmjs.com/package/nedb",
        "description": "Database manager."
      },
      "fs": {
        "type": "FileSystem Module",
        "description": "NodeJS File System interface to the Operating File System."
      },
      "path": {
        "type": "Path Module",
        "description": "Path Module used for manipulating FileSystem Paths."
      },
      "CONSTANTS": {
        "type": "CONSTANTS Module",
        "description": "Bot Constants used to generalize Outputs and Settings."
      },
      "TTV_API_INFO": {
        "type": "Object",
        "description": "All Twitch API Endpoints and their requiered Scopes, Tokens and Return Types are stored in here!"
      },
      "UNNOFF_TTV_API_INFO": {
        "type": "Object",
        "description": "Unofficial Twitch API Endpoints Information."
      }
    },
    "classes": {
      "TwitchAPI": {
        "description": "The actual Class for interfacing and Maintaining Connection to the Twitch API.",
        "parent": {
          "name": "ModuleBase",
          "from": {
            "name": "ModuleBase",
            "type": "FrikyBot Module"
          }
        },
        "constructor": {
          "params": [
            {
              "name": "configJSON",
              "type": "Object"
            },
            {
              "name": "logger",
              "opt": true,
              "type": "Logger.js:Logger"
            }
          ],
          "description": "Preparing the Module Datastructure."
        },
        "variables": {
          "RateLimits": {
            "type": "Object",
            "description": "Flag indicating a Rate Limit was reached."
          },
          "AppAccessToken": {
            "type": "Object",
            "description": "App Access Token information."
          },
          "UserAccessToken": {
            "type": "Object",
            "description": "User Access Token information."
          },
          "API_LOG": {
            "type": "nedb:Datastore",
            "description": "Database storing all Twitch API calls."
          },
          "Settings_LOG": {
            "type": "nedb:Datastore",
            "description": "Database storing all Settings related changes."
          },
          "STAT_API_CALLS": {
            "type": "Number",
            "description": "Incrementing Number of called Twitch API Endpoints."
          },
          "STAT_API_CALLS_PER_10": {
            "type": "Number",
            "description": "Incrementing Number of called Twitch API Endpoints per 10 minutes."
          },
          "STAT_MINUTE_TIMER": {
            "type": "Interval",
            "description": "Inerval resetting the per 10 Stats to 0 every 10 minutes. (yeah thats not really accurate i know, but i is OKAAAY)"
          }
        },
        "functions": {
          "Init": {
            "params": [
              {
                "name": "WebInter",
                "type": "WebApp::WebInteractor"
              }
            ],
            "is-async": true,
            "description": "Setting up the Custom API, create TTV API Functions for easy access, updates the App and User Tokens, loading Databases and Creating Filestructures."
          },
          "setAPI": {
            "params": [
              {
                "name": "WebInter",
                "type": "WebApp::WebInteractor"
              }
            ],
            "description": "Setting up the Custom API."
          },
          "CreateTTVApiFunctions": {
            "params": null,
            "description": "Turns the API Endpoints of the TTV_API_INFO Object into Functions to be used by the User."
          },
          "getAppAccessToken": {
            "params": null,
            "is-async": true,
            "description": "Requests and returns a App Access Token."
          },
          "updateAppAccessToken": {
            "params": null,
            "is-async": true,
            "description": "Requests/Updates the App Access Token."
          },
          "removeAppAccessToken": {
            "params": null,
            "is-async": true,
            "description": "Removes and revokes the current App Access Token."
          },
          "generateUserAccessLinkCode": {
            "params": [
              {
                "name": "scopes",
                "type": "Array"
              },
              {
                "name": "claims",
                "opt": true,
                "type": "Object"
              }
            ],
            "description": "Returns a Querry String for Users to Log in using Twitch and return a Access Code. Used for Server Side Login,"
          },
          "generateUserAccessLinkToken": {
            "params": [
              {
                "name": "scopes",
                "type": "Array"
              },
              {
                "name": "claims",
                "opt": true,
                "type": "Object"
              }
            ],
            "description": "Returns a Querry String for Users to Log in using Twitch and return a Access Token. Used for Website Login."
          },
          "getUserAccessToken": {
            "params": [
              {
                "name": "code",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Requests a User Access Token based on an Access Code."
          },
          "createUserAccessToken": {
            "params": [
              {
                "name": "code",
                "type": "String"
              },
              {
                "name": "scopes",
                "opt": true,
                "type": "Array"
              }
            ],
            "is-async": true,
            "description": "Requests a User Access Token, checks for IODC Infos and saves the User Access Token with extended information in a File."
          },
          "updateUserAccessToken": {
            "params": null,
            "is-async": true,
            "description": "Requests/Updates/Refreshes the User Access Token."
          },
          "removeUserAccessToken": {
            "params": null,
            "is-async": true,
            "description": "Deletes the current User Access Token."
          },
          "revoke": {
            "params": [
              {
                "name": "token",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Revokes a App Access Token."
          },
          "refresh": {
            "params": [
              {
                "name": "token",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Refreshes a user Access Token."
          },
          "OIDCUserInfoEndpoint": {
            "params": [
              {
                "name": "oauth",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Returns the IODC User Information Data provided by a Oauth Token."
          },
          "CheckAccessToken": {
            "params": [
              {
                "name": "token",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Uses the Get Streams Twitch API Endpoint to check if the Access Token is valid."
          },
          "VerifyTTVJWT": {
            "params": [
              {
                "name": "token",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Verifies the given JWT using the Twitch signing methods."
          },
          "setExtraTokenDetails": {
            "params": [
              {
                "name": "token",
                "type": "Object"
              }
            ],
            "description": "Adds a \"created_at\"-Date and an \"expires_at\"-Date to the Token Object."
          },
          "saveToken": {
            "params": [
              {
                "name": "token",
                "type": "Object"
              },
              {
                "name": "type",
                "type": "String"
              }
            ],
            "description": "Saves a Token Object into its Token Directory."
          },
          "readTokensFromFile": {
            "params": [
              {
                "name": "type",
                "type": "String"
              }
            ],
            "description": "Returns all Tokens of the given type."
          },
          "getClaims": {
            "params": null,
            "description": "Returns the currently selected Claims."
          },
          "getScopes": {
            "params": null,
            "description": "Returns the currently selected Scopes."
          },
          "getQueryStringFromQueryParameters": {
            "params": [
              {
                "name": "Query_Parameters",
                "type": "Object"
              }
            ],
            "description": "Returns the Object Encoded Querry Parameters converted into a propper String Querry."
          },
          "AccessTwitchNewAPI": {
            "params": [
              {
                "name": "endpoint_name",
                "type": "String"
              },
              {
                "name": "querry_params",
                "opt": true,
                "type": "Object"
              },
              {
                "name": "BODY",
                "opt": true,
                "type": "Object"
              },
              {
                "name": "RETURN_RAW",
                "opt": true,
                "type": "Boolean"
              },
              {
                "name": "extern_jwt",
                "opt": true,
                "type": "String"
              },
              {
                "name": "RETRYS",
                "opt": true,
                "type": "Number"
              }
            ],
            "is-async": true,
            "description": "Master Twitch API Endpoint Interface Function! Collects the requiered Access Token and Header/Body Paramerts and returns the API Data or retries again. When using Extension Endpoints, use the 'extern_jwt' for your Extension Authorizations!"
          },
          "GetChannelViewers": {
            "params": [
              {
                "name": "channel_name",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "(UNOFFICIAL/THIRD PARTY API) Returns the current Viewers of this Channel"
          },
          "getClientID": {
            "params": null,
            "description": "Returns the current Client ID."
          },
          "GetIdentifier": {
            "params": null,
            "description": "Returns the string 'ttv_auth'."
          },
          "GetEndpointSettings": {
            "params": null,
            "description": "Returns an Object with information about Official and Unofficial API Endpoints."
          },
          "request": {
            "params": [
              {
                "name": "URL",
                "type": "String"
              },
              {
                "name": "options",
                "type": "Object"
              },
              {
                "name": "callback",
                "type": "Function"
              },
              {
                "name": "raw",
                "type": "Boolean"
              }
            ],
            "is-async": true,
            "description": "Uses Node Fetch to fetch API Data."
          },
          "trimString": {
            "params": [
              {
                "name": "str",
                "type": "String"
              }
            ],
            "description": "A String.trim() implementation."
          }
        },
        "API": {
          "Endpoints": [
            {
              "name": "Get Tokens",
              "endpoint": "/api/TwitchAPI/token",
              "description": "Get the Current Status of App and User Access Tokens. This includes Availability and Expire/Issue Times.",
              "restricted": "full",
              "request": {
                "query": {
                  "type": {
                    "type": "String",
                    "description": "Token Type to be returned, can be 'app' or 'user'. If none is supplied, both will be returned."
                  }
                }
              },
              "response": {
                "data": {
                  "type": "Array",
                  "description": "Array of both Access Tokens."
                },
                "data.type": {
                  "type": "String",
                  "description": "Token Type String"
                },
                "data.state": {
                  "type": "String",
                  "description": "Possible values: 'unavailable' or 'available'"
                },
                "data.data": {
                  "type": "Object",
                  "description": "Containing 'iat' and 'exp' Timestamps. UserTokens also have 'scopes', 'sub' and more Data attached."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Update Tokens",
              "endpoint": "/api/TwitchAPI/token",
              "description": "Update the current App and User Access Tokens. This includes refreshing current, revoking old or requesting new Tokens.",
              "restricted": "full",
              "request": {
                "method": "PATCH",
                "query": {
                  "type": {
                    "type": "String",
                    "description": "Token Type to be updated, can be 'app' or 'user'. If none is supplied, both will be updated."
                  }
                }
              },
              "response": {
                "data": {
                  "type": "Array",
                  "description": "Array of both Access Tokens."
                },
                "data.type": {
                  "type": "String",
                  "description": "Token Type String"
                },
                "data.state": {
                  "type": "String",
                  "description": "Possible values: 'unavailable' or 'available'"
                },
                "data.data": {
                  "type": "Object",
                  "description": "Containing 'iat' and 'exp' Timestamps. UserTokens also have 'scopes', 'sub' and more Data attached."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Delete Tokens",
              "endpoint": "/api/TwitchAPI/token",
              "description": "Delete the current App and User Access Tokens.",
              "restricted": "full",
              "request": {
                "method": "DELETE",
                "query": {
                  "type": {
                    "type": "String",
                    "description": "Token Type to be deleted, can be 'app' or 'user'. If none is supplied, both will be deleted."
                  }
                }
              },
              "response": {
                "data": {
                  "type": "Array",
                  "description": "Array of both Access Tokens."
                },
                "data.type": {
                  "type": "String",
                  "description": "Token Type String"
                },
                "data.state": {
                  "type": "String",
                  "description": "Possible values: 'failed' or 'deleted'"
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Get Scopes",
              "endpoint": "/api/TwitchAPI/Scopes",
              "description": "Get the currently selected Scopes and Claims of the User Access Token.",
              "restricted": "full",
              "request": null,
              "response": {
                "data": {
                  "type": "Array",
                  "description": "Array of both Access Tokens."
                },
                "data.scopes": {
                  "type": "Array",
                  "description": "Array of the current Token Scopes."
                },
                "data.claims": {
                  "type": "Array",
                  "description": "Array of the current User Claims."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Update Twitch Dev Application Information",
              "endpoint": "/api/settings/TwitchAPI/Application",
              "description": "Used to update your Twitch Dev Application Secret and Client ID. A new App Access Token will be requested immediately. The old Settings will be saved, if something doesnt match. Remember that changing the ClientID/Secret also makes all Tokens(ESPECIALLY LOGIN TOKEN) unvalid!",
              "restricted": "full",
              "request": {
                "method": "POST",
                "body": {
                  "ClientID": {
                    "type": "String",
                    "description": "Twitch Dev Application ClientID."
                  },
                  "Secret": {
                    "type": "String",
                    "description": "Twitch Dev Application Secret."
                  }
                }
              },
              "response": {
                "msg": {
                  "type": "String",
                  "description": "Confirmation Text of successfull update."
                },
                "ClientID": {
                  "type": "String",
                  "description": "The Updated Application ClientID."
                },
                "Secret": {
                  "type": "String",
                  "description": "The Updated Application Secret."
                },
                "usertoken": {
                  "type": "Boolean",
                  "description": "If your Usertoken is still valid, this Field will be true."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Update Twitch API Endpoint Rescrictions",
              "endpoint": "/api/settings/TwitchAPI/Endpoints/:endpoint",
              "description": "This disables Twitch API Endpoints globally.",
              "restricted": "full",
              "request": {
                "method": "PUT",
                "query": {
                  "mode": {
                    "type": "String",
                    "description": "Toogle Mode can be 'toggle', 'enable' or 'disable'"
                  },
                  "unoff": {
                    "type": "Boolean",
                    "description": "Unofficial Endpoint Mode."
                  }
                },
                "params": {
                  "endpoint": {
                    "type": "String",
                    "description": "Endpoint Name to be changed. Endpoint Name must be an exact match. Use 'all' to change all at the same time."
                  }
                }
              },
              "response": {
                "state": {
                  "type": "Boolean",
                  "description": "State of Change can be true or false."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Change Settings",
              "endpoint": "/api/settings/TwitchAPI/misc",
              "description": "Change Config Settings of the TwitchAPI.",
              "restricted": "full",
              "request": {
                "method": "PUT",
                "body": {
                  "mode": {
                    "type": "String",
                    "description": "Toogle Mode can be 'toggle' or 'set'"
                  },
                  "setting": {
                    "type": "String",
                    "description": "Setting Name."
                  },
                  "value": {
                    "type": "Any",
                    "description": "Setting Value."
                  }
                }
              },
              "response": {
                "state": {
                  "type": "Any",
                  "description": "Echoes back the new Value."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Change Settings",
              "endpoint": "/api/settings/TwitchAPI/misc",
              "description": "Change Config Settings of the TwitchAPI.",
              "restricted": "full",
              "request": {
                "query": {
                  "channels": {
                    "type": "String",
                    "description": "Channel Name to be returned."
                  }
                }
              },
              "response": {
                "data": {
                  "type": "Array",
                  "description": "List of Channels similar to your Query."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            }
          ]
        }
      },
      "Authenticator": {
        "description": "Authenticator implementation for Logging in via Twitch.",
        "parent": {
          "name": "Authenticator",
          "from": {
            "name": "WEBAPP",
            "type": "FrikyBot Module"
          }
        },
        "constructor": {
          "params": [
            {
              "name": "logger",
              "type": "Logger.js:Logger"
            },
            {
              "name": "parentConfigObj",
              "type": "Object"
            },
            {
              "name": "TwitchAPI",
              "type": "TwitchAPI::TwitchAPI"
            }
          ],
          "description": "Preparing the Authenticator Datastructure."
        },
        "variables": {
          "HAS_ADMIN_USER": {
            "type": "Boolean",
            "description": "Just a cached Check of an Admin User present in the Databse."
          },
          "TwitchAPI": {
            "type": "TwitchAPI::TwitchAPI",
            "description": "TwitchAPI Object for access tot the Twitch API."
          }
        },
        "functions": {
          "Init": {
            "params": [
              {
                "name": "WebInter",
                "type": "WebApp::WebInteractor"
              }
            ],
            "is-async": true,
            "description": "Setting up the Custom API and loading Databases."
          },
          "setAPI": {
            "params": [
              {
                "name": "WebInter",
                "type": "WebApp::WebInteractor"
              }
            ],
            "description": "Setting up the Custom API."
          },
          "AuthorizeRequest": {
            "params": [
              {
                "name": "headers",
                "type": "Object"
              },
              {
                "name": "method",
                "type": "Object"
              },
              {
                "name": "user",
                "opt": true,
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the Headers to Authenticate the User and then Authorizes them based on the method. Resolves with the User or rejects with an error."
          },
          "AuthenticateUser": {
            "params": [
              {
                "name": "headers",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the Headers to Authenticate the User and sets the Userlevel from the Databse. Resolves with the User or rejects with an error."
          },
          "AuthorizeUser": {
            "params": [
              {
                "name": "user",
                "type": "Object"
              },
              {
                "name": "method",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the Userdata to Authorize them based on the given method. Resolves with the User or rejects with an error."
          },
          "Auth_UserID": {
            "params": [
              {
                "name": "user_id",
                "type": "Number"
              },
              {
                "name": "target_id",
                "type": "Number"
              }
            ],
            "is-async": true,
            "description": "Compares the given User and Target IDs and resolves or rejects on (miss)match."
          },
          "Auth_UserLevel": {
            "params": [
              {
                "name": "user_level",
                "type": "String or Number"
              },
              {
                "name": "target_level",
                "type": "String or Number"
              },
              {
                "name": "cutoff",
                "type": "Boolean"
              }
            ],
            "is-async": true,
            "description": "Compares the given Userlevels and resolves or rejects on (miss)match. Use the cutoff to allow the same Userlevel to reject instead of resolve!"
          },
          "GetUsers": {
            "params": [
              {
                "name": "params",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Returns Users from the Database based on the given parameters."
          },
          "addUser": {
            "params": [
              {
                "name": "user_id",
                "type": "Number"
              },
              {
                "name": "user_name",
                "type": "String"
              },
              {
                "name": "user_level",
                "type": "String"
              },
              {
                "name": "added_by_id",
                "type": "Number"
              },
              {
                "name": "added_by",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Adds a User to the Database."
          },
          "removeUser": {
            "params": [
              {
                "name": "user_id",
                "type": "Number"
              },
              {
                "name": "removed_by_id",
                "type": "Number"
              },
              {
                "name": "removed_by",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Removes a User from the Database."
          },
          "updateUser": {
            "params": [
              {
                "name": "user_id",
                "type": "Number"
              },
              {
                "name": "user_name",
                "type": "String"
              },
              {
                "name": "user_level",
                "type": "String"
              },
              {
                "name": "changed_by_id",
                "type": "Number"
              },
              {
                "name": "changed_by",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Updates a User in the Database."
          },
          "GetUserlevels": {
            "params": null,
            "description": "Returns all selectable Userlevels."
          },
          "GetUserLevelIndex": {
            "params": [
              {
                "name": "user_level",
                "type": "Strng"
              }
            ],
            "description": "Returns the Index of a Userlevel."
          },
          "CompareUserlevels": {
            "params": [
              {
                "name": "user_level",
                "type": "String or Number"
              },
              {
                "name": "target_level",
                "type": "String or Number"
              },
              {
                "name": "cutoff",
                "type": "Boolean"
              }
            ],
            "description": "Compares the given Userlevels and returns true on match, false otherwise. Use the cutoff to allow the same Userlevel to return false instead of true!"
          },
          "UpdateAdminCheck": {
            "params": null,
            "is-async": true,
            "description": "Checks the Datbase for an Admin User and Updates the HAS_ADMIN_USER Flag."
          },
          "fetchUserInfo": {
            "params": [
              {
                "name": "ids",
                "type": "Array"
              },
              {
                "name": "names",
                "type": "Array"
              }
            ],
            "is-async": true,
            "description": "Get User Information using the Twitch API."
          }
        },
        "API": {
          "Endpoints": [
            {
              "name": "Get User",
              "endpoint": "/api/settings/TwitchAPI/ttvauth/user",
              "description": "Get a List of the all Users in the User Database.",
              "restricted": "full",
              "request": {
                "query": {
                  "user_id": {
                    "type": "String",
                    "description": "Bot User ID."
                  }
                }
              },
              "response": {
                "data": {
                  "type": "Array",
                  "description": "Array of all Users."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Add User",
              "endpoint": "/api/settings/TwitchAPI/ttvauth/user",
              "description": "Add a User to the User Database.",
              "restricted": "full",
              "request": {
                "method": "POST",
                "body": {
                  "user_id": {
                    "type": "String",
                    "description": "Bot User ID."
                  },
                  "user_name": {
                    "type": "String",
                    "description": "Bot Username."
                  },
                  "user_level": {
                    "type": "String",
                    "description": "Bot Userlevel."
                  }
                }
              },
              "response": {
                "new_user": {
                  "type": "Object",
                  "description": "Returns the new user Document."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Delete User",
              "endpoint": "/api/settings/TwitchAPI/ttvauth/user",
              "description": "Remove a User from the User Database.",
              "restricted": "full",
              "request": {
                "method": "DELETE",
                "body": {
                  "user_id": {
                    "type": "String",
                    "description": "Bot User ID."
                  }
                }
              },
              "response": {
                "deleted": {
                  "type": "Number",
                  "description": "Returns the number of removed documents."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Update User",
              "endpoint": "/api/settings/TwitchAPI/ttvauth/user",
              "description": "Update a Users Userlevel or Username.",
              "restricted": "full",
              "request": {
                "method": "PUT",
                "body": {
                  "user_id": {
                    "type": "String",
                    "description": "The target User ID."
                  },
                  "user_name": {
                    "type": "String",
                    "description": "The new Username."
                  },
                  "user_level": {
                    "type": "String",
                    "description": "The new Userlevel."
                  },
                  "err": {
                    "type": "String",
                    "description": "Error Message, when something went wrong."
                  }
                }
              },
              "response": {
                "upt_user": {
                  "type": "Object",
                  "description": "Returns the updated document."
                }
              }
            },
            {
              "name": "Set Enable State",
              "endpoint": "/api/settings/TwitchAPI/ttvauth/state",
              "description": "Update a Users Userlevel or Username.",
              "restricted": "full",
              "request": {
                "method": "POST",
                "body": {
                  "state": {
                    "type": "Boolean",
                    "description": "The new Enable State (true or false)."
                  }
                }
              },
              "response": {
                "state": {
                  "type": "Boolean",
                  "description": "Returns the updatet Enable State."
                },
                "err": {
                  "type": "String",
                  "description": "Error Message, when something went wrong."
                }
              }
            },
            {
              "name": "Get Login Link",
              "endpoint": "/api/TwitchAPI/login/user",
              "description": "Returns a Link to Login via Twitch. This Link must be clicked by a User on a Website. This Link request an Authentication TOKEN, NOT visible by the server!",
              "request": {
                "method": "POST",
                "body": {
                  "scopes": {
                    "type": "Array",
                    "description": "List of all Scopes the User selected."
                  },
                  "claims": {
                    "type": "Array",
                    "description": "List of all Claims the User selected. (defaults to the Config Settings when none given)"
                  }
                }
              },
              "response": {
                "data": {
                  "type": "String",
                  "description": "The generated Link."
                }
              }
            },
            {
              "name": "Get BotUser Login Link",
              "endpoint": "/api/TwitchAPI/login/bot",
              "description": "Returns a Link to Login via Twitch. This Link must be clicked by a User on a Website. This Link request an Authentication CODE visible by the server!",
              "restricted": "full",
              "request": {
                "method": "POST",
                "body": {
                  "scopes": {
                    "type": "Array",
                    "description": "List of all Scopes the User selected. (defaults to the Config Settings when none given)"
                  },
                  "claims": {
                    "type": "Array",
                    "description": "List of all Claims the User selected. (defaults to the Config Settings when none given)"
                  }
                }
              },
              "response": {
                "data": {
                  "type": "String",
                  "description": "The generated Link."
                }
              }
            }
          ]
        }
      }
    },
    "exports": {
      "TwitchAPI": "TwitchAPI",
      "Authenticator": "Authenticator"
    }
  }
}