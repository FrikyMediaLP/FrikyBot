{
  "PackageBase": {
    "description": "PackageBase Module containing everythink to create a Package.",
    "modules": {
      "fs": "NodeJS Module",
      "path": "NodeJS Module",
      "CONSTANTS": "FrikyBot Module",
      "CONFIGHANDLER": "FrikyBot Module"
    },
    "variables": {
      "CONSTANTS": {
        "type": "CONSTANTS Module",
        "description": "Bot Constants used to generalize Outputs and Settings."
      },
      "CONFIGHANDLER": {
        "type": "ConfigHandler Module",
        "description": "Bot Config Handler managing Changes and sub-Configs."
      },
      "fs": {
        "type": "FileSystem Module",
        "description": "NodeJS File System interface to the Operating File System."
      },
      "path": {
        "type": "Path Module",
        "description": "Path Module used for manipulating FileSystem Paths."
      }
    },
    "classes": {
      "PackageBase": {
        "description": "Parent Class of Packages. Providing all necessary features to create and maintain a Package.",
        "constructor": {
          "params": [
            {
              "name": "package_details",
              "type": "Object"
            },
            {
              "name": "webappinteractor",
              "type": "WebApp::WebAppInteractor"
            },
            {
              "name": "twitchirc",
              "type": "TwitchIRC::TwitchIRC"
            },
            {
              "name": "twitchapi",
              "type": "TwitchAPI:TwitchAPI"
            },
            {
              "name": "datacollection",
              "type": "DataCollection:DataCollection"
            },
            {
              "name": "logger",
              "opt": true,
              "type": "Logger.js:Logger"
            }
          ],
          "description": "Sets all neccacary Variables, Settings and Logging Functions requiered for a Package."
        },
        "variables": {
          "Package_Details": {
            "type": "Object",
            "description": "Package Details Informations."
          },
          "Config": {
            "type": "ConfigHandler.js::Config",
            "description": "Settings of the current Filter."
          },
          "Package_Interconnects": {
            "type": "Array",
            "description": "All Active Package Interconnects."
          },
          "Requested_Package_Interconnects": {
            "type": "Array",
            "description": "All Requested Package Interconnects."
          },
          "Allowed_Package_Interconnects": {
            "type": "Array",
            "description": "All Packages that are allowed to request Package Interconnects."
          },
          "WebAppInteractor": {
            "type": "WebApp.js::WebAppInteractor",
            "description": "The WebAppInteractor interfacing with the Express App."
          },
          "TwitchIRC": {
            "type": "TwitchIRC.js:TwitchIRC",
            "description": "Twitch Chat Connection."
          },
          "TwitchAPI": {
            "type": "TwitchAPI.js:TwitchAPI",
            "description": "Twitch API Connection."
          },
          "Datacollection": {
            "type": "Datacollection.js:Datacollection",
            "description": "Datacollection Module Object."
          },
          "USE_HTML_HOSTING": {
            "type": "Boolean",
            "description": "Flag if this Package provides HTML Documents."
          },
          "USE_API_HOSTING": {
            "type": "Boolean",
            "description": "Flag if this Package provides API Endpoint."
          },
          "RESTRICTED_HTML_HOSTING": {
            "type": "Boolean",
            "description": "Flag if this Package provides HTML Documents that are restricted by Authentication."
          },
          "WEB_COOKIES": {
            "type": "Object",
            "description": "WebCookie Information the Package Uses on its WebSite."
          },
          "DISPLAYABELS": {
            "type": "Array",
            "description": "Displayable Stats of the Package."
          },
          "LOGS": {
            "type": "Array",
            "description": "Loging Databases of the Package."
          },
          "Logger": {
            "type": "Any Logger Object",
            "description": "Console Logger."
          }
        },
        "functions": {
          "Init": {
            "params": [
              {
                "name": "WebInter",
                "type": "WebApp::WebInteractor"
              }
            ],
            "is-async": true,
            "description": "Overwrite this Function to Setup Variables and Directories."
          },
          "PostInit": {
            "params": null,
            "is-async": true,
            "description": "Used for custom PostInitializations - Default: if set, Connects Packages (PackageInterconnect) and returns a resolved Promise."
          },
          "enable": {
            "params": null,
            "is-async": true,
            "description": "Used for enabling the Package - Default: sets 'Settings.enabled' to 'true' and returns a resolved Promise."
          },
          "disable": {
            "params": null,
            "is-async": true,
            "description": "Used for disabling the Package - Default: sets 'Settings.enabled' to 'false' and returns a resolved Promise."
          },
          "reload": {
            "params": null,
            "is-async": true,
            "description": "Used to reload the Packages Settings/Data/... - Default: calls 'Init()' and 'PostInit()' and returns a resolved Promise."
          },
          "setEnable": {
            "params": [
              {
                "name": "enable",
                "type": "Boolean"
              }
            ],
            "description": "Sets the isEnabled() Functions Return to the given Boolean."
          },
          "setLogger": {
            "params": [
              {
                "name": "loggerObject",
                "type": "Object"
              }
            ],
            "description": "Sets the ClassÂ´s Logger Functions. The Logger Object needs an info(msg:string), a warn(msg:string) and an error(msg:error) Function."
          },
          "setStartparameters": {
            "params": [
              {
                "name": "parameters",
                "type": "Object"
              }
            ],
            "description": "Overwrite this Function to set custom Settings based on the start parameters."
          },
          "allowPackageInterconnects": {
            "params": [
              {
                "name": "allowed",
                "type": "Object"
              }
            ],
            "description": "Sets the given allowed Object Content to the Allowed_Package_Interconnects Object."
          },
          "GetPackageInterconnectRequests": {
            "params": null,
            "description": "Returns the the Requested_Package_Interconnects Object."
          },
          "addPackageInterconnectRequest": {
            "params": [
              {
                "name": "package_name",
                "type": "String"
              },
              {
                "name": "callback",
                "type": "Function"
              }
            ],
            "description": "Adds a Packge Interconnect Request to the Requested_Package_Interconnects Object."
          },
          "requestPackageInterconnect": {
            "params": [
              {
                "name": "package_name",
                "type": "String"
              },
              {
                "name": "callback",
                "type": "Function"
              }
            ],
            "description": "Adds an allowed Package Interconnect, otherwise blocks and returns false."
          },
          "useDefaultFileRouter": {
            "params": null,
            "description": "Sets an Express Router to static Files inside the Packages 'html' Folder."
          },
          "setFileRouter": {
            "params": [
              {
                "name": "router",
                "type": "Express::Router"
              }
            ],
            "description": "Sets an Express Router to the Package URL Route."
          },
          "setAPIRouter": {
            "params": [
              {
                "name": "router",
                "type": "Express::Router"
              }
            ],
            "description": "Sets an Express Router to the Package API-URL Route."
          },
          "setAuthenticatedAPIRouter": {
            "params": [
              {
                "name": "router",
                "type": "Express::Router"
              },
              {
                "name": "method",
                "type": "Object"
              }
            ],
            "description": "Sets an Express Router to the Package API-URL Route and provides Authentication Protection."
          },
          "setAPIEndpoint": {
            "params": [
              {
                "name": "endpoint",
                "type": "String"
              },
              {
                "name": "callback",
                "type": "Function"
              },
              {
                "name": "method",
                "type": "Object"
              }
            ],
            "description": "Sets an API Endpoint to the Package API-URL Route."
          },
          "setAuthenticatedAPIEndpoint": {
            "params": [
              {
                "name": "endpoint",
                "type": "String"
              },
              {
                "name": "auth_method",
                "type": "Object"
              },
              {
                "name": "callback",
                "type": "Function"
              },
              {
                "name": "method",
                "type": "String"
              }
            ],
            "description": "Sets an API Endpoint to the Package API-URL Route and provides Authentication Protection."
          },
          "setWebNavigation": {
            "params": [
              {
                "name": "data",
                "type": "Object"
              }
            ],
            "description": "Sets the Navigation settings on the Website."
          },
          "getHTMLROOT": {
            "params": null,
            "description": "Returns the URL Root out the File Router."
          },
          "getAPIROOT": {
            "params": null,
            "description": "Returns the URL Root out the API Router."
          },
          "getName": {
            "params": null,
            "description": "Returns the Package name."
          },
          "getDescription": {
            "params": null,
            "description": "Returns the Package Description."
          },
          "getPackageDetails": {
            "params": null,
            "description": "Returns the Package Details including Description and Html Root, if provided."
          },
          "setWebCookies": {
            "params": [
              {
                "name": "cookie_data",
                "type": "Object"
              }
            ],
            "description": "Sets the given cookie_data to the 'WEB_COOKIES' Object."
          },
          "addWebCookie": {
            "params": [
              {
                "name": "type",
                "type": "String"
              },
              {
                "name": "cookie_data",
                "type": "Object"
              }
            ],
            "description": "Sets all Keys of the given cookie_data to the 'WEB_COOKIES' Object of the given Type."
          },
          "getWebCookies": {
            "params": null,
            "description": "Returns the WebCookies of this Package."
          },
          "addDisplayable": {
            "params": [
              {
                "name": "name",
                "type": "String"
              },
              {
                "name": "value",
                "type": "Any"
              }
            ],
            "description": "Pushes a Displayable Stat to the 'DISPLAYABELS' Array."
          },
          "addDisplayables": {
            "params": [
              {
                "name": "displayables",
                "type": "Array"
              }
            ],
            "description": "Pushes all Displayable Stats to the 'DISPLAYABELS' Array."
          },
          "removeDisplayable": {
            "params": [
              {
                "name": "name",
                "type": "String"
              }
            ],
            "description": "Pops the given Displayable Stat off the 'DISPLAYABELS' Array."
          },
          "GetDisplayables": {
            "params": null,
            "description": "Returns the 'DISPLAYABELS' Array."
          },
          "addLog": {
            "params": [
              {
                "name": "name",
                "type": "String"
              },
              {
                "name": "query",
                "type": "nedb::Datastore"
              },
              {
                "name": "query",
                "type": "Object"
              }
            ],
            "description": "Pushes a Log to the 'LOGS' Array."
          },
          "removeLog": {
            "params": [
              {
                "name": "name",
                "type": "String"
              }
            ],
            "description": "Pops a Log off the 'LOGS' Array."
          },
          "GetLogs": {
            "params": null,
            "is-async": true,
            "description": "Returns the 'LOGS' Array."
          },
          "getMainPackageRoot": {
            "params": null,
            "description": "Returns the Package File Root."
          },
          "isEnabled": {
            "params": null,
            "description": "Returns the current enable State of the Package."
          },
          "writeFile": {
            "params": [
              {
                "name": "path",
                "type": "String"
              },
              {
                "name": "data",
                "type": "String"
              }
            ],
            "description": "Writes a data String into a File at the given path."
          },
          "readFile": {
            "params": [
              {
                "name": "path",
                "type": "String"
              }
            ],
            "description": "Reads a data String from a File at the given path."
          },
          "copyFile": {
            "params": [
              {
                "name": "file",
                "type": "String"
              },
              {
                "name": "dir2",
                "type": "String"
              }
            ],
            "description": "Copies a given File to the new given Dir."
          },
          "getFilesFromDir": {
            "params": [
              {
                "name": "path",
                "type": "String"
              },
              {
                "name": "options",
                "type": "Object"
              }
            ],
            "description": "Returns all File names in the Array."
          },
          "HTMLFileExists": {
            "params": [
              {
                "name": "URL_PATH",
                "type": "String"
              }
            ],
            "description": "Converts a URL String into a FileSystem Path and Returns that File, if it exist."
          },
          "AccessNeDB": {
            "params": [
              {
                "name": "datastore",
                "type": "nedb::Datastore"
              },
              {
                "name": "query",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Allows Access to an NEDB Database Asynchronously."
          },
          "AddObjectElementsToOtherObject": {
            "params": [
              {
                "name": "into",
                "type": "Object"
              },
              {
                "name": "from",
                "type": "Object"
              },
              {
                "name": "logger",
                "opt": true,
                "type": "Function"
              },
              {
                "name": "replaceMode",
                "opt": true,
                "type": "Boolean"
              }
            ],
            "description": "Adds the Contents of Object B to Object A. A logger can be set to output changes/infos. A replaceMode can be set, to overwrite existing Contents."
          },
          "HasObjectContents": {
            "params": [
              {
                "name": "object",
                "type": "Object"
              },
              {
                "name": "contents",
                "type": "Object"
              }
            ],
            "description": "Recursivly Checks Object Contents for existance. Returns a String with a 'discrepancy-message' or True, if all Contents are present."
          },
          "checkForCompletion": {
            "params": [
              {
                "name": "source",
                "type": "Object"
              },
              {
                "name": "template",
                "type": "Object"
              },
              {
                "name": "required",
                "type": "Object"
              }
            ],
            "description": "Recursivly Checks Object Contents for existance. Returns a String with a 'discrepancy-message' or 'COMPLETE', if all Contents are present."
          },
          "ReplaceObjectContents": {
            "params": [
              {
                "name": "object",
                "type": "Object"
              },
              {
                "name": "path",
                "type": "String"
              },
              {
                "name": "value",
                "type": "any"
              }
            ],
            "description": "Changes the Content of a Key inside an Object. path is a Dot-Seperated List of Key-Names going deeper into the Object."
          },
          "StringContains": {
            "params": [
              {
                "name": "string",
                "type": "String"
              },
              {
                "name": "array",
                "type": "Array"
              }
            ],
            "description": "Checks a given Sting if it contains any of the given substring in the given array."
          },
          "arrayShiftUp": {
            "params": [
              {
                "name": "arr",
                "type": "Array"
              },
              {
                "name": "n",
                "opt": true,
                "type": "Number"
              }
            ],
            "description": "Shifts the given Array Elements up n(default: 1) places."
          },
          "replaceAll": {
            "params": [
              {
                "name": "string",
                "type": "String"
              },
              {
                "name": "replace",
                "type": "String"
              },
              {
                "name": "wITH",
                "type": "String"
              }
            ],
            "description": "Replaces all 'replace'-substrings with the 'with'-contents."
          }
        }
      }
    },
    "exports": {
      "PackageBase": "PackageBase"
    }
  }
}