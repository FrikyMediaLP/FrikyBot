{
  "ChatModeration": {
    "description": "ChatModeration Module managing Filters and Timers.",
    "modules": {
      "express": "npm",
      "nedb": "npm",
      "fs": "NodeJS Module",
      "path": "NodeJS Module",
      "CONSTANTS": "FrikyBot Module",
      "CONFIGHANDLER": "FrikyBot Module",
      "TwitchIRC": "FrikyBot Module",
      "BTTV": "FrikyBot Module",
      "FFZ": "FrikyBot Module",
      "CommandHandler": "FrikyBot Module (Used for Package Interconnect)"
    },
    "variables": {
      "CONSTANTS": {
        "type": "CONSTANTS Module",
        "description": "Bot Constants used to generalize Outputs and Settings."
      },
      "TWITCHIRC": {
        "type": "TwitchIRC Module",
        "description": "Twitch Chat connection and Message Class."
      },
      "COMMANDHANDLER": {
        "type": "CommandHandler Module",
        "description": "CommandHandler checking Messages for Commands."
      },
      "BTTV": {
        "type": "BTTV Module",
        "description": "Better TwitchTV API Interface."
      },
      "FFZ": {
        "type": "FFZ Module",
        "description": "FrankerFaceZ API Interface."
      },
      "path": {
        "type": "Path Module",
        "description": "Path Module used for manipulating FileSystem Paths."
      },
      "fs": {
        "type": "FileSystem Module",
        "description": "NodeJS File System interface to the Operating File System."
      },
      "express": {
        "type": "Express Module",
        "npm": "https://www.npmjs.com/package/express",
        "description": "Express WebApp hosting the Website and API."
      },
      "Datastore": {
        "type": "nedb Module",
        "npm": "https://www.npmjs.com/package/nedb",
        "description": "Database Module for ... maintaining Databases."
      },
      "CONFIGHANDLER": {
        "type": "Object",
        "description": "CONFIGHANDLER Module."
      },
      "PACKAGE_DETAILS": {
        "type": "Object",
        "description": "Object containing the Package Detail Informations."
      },
      "PUNISHMENT": {
        "type": "Object",
        "description": "Contant Register of Punishment identifiers."
      }
    },
    "classes": {
      "ChatModeration": {
        "description": "Main Chat Modertation Class managing all Filters and Punishments.",
        "parent": {
          "name": "PackageBase",
          "from": {
            "name": "PackageBase",
            "type": "FrikyBot Module"
          }
        },
        "constructor": {
          "params": [
            {
              "name": "webappinteractor",
              "type": "WebApp.js::WebAppInteractor"
            },
            {
              "name": "twitchirc",
              "type": "TwitchIRC.js:TwitchIRC"
            },
            {
              "name": "twitchapi",
              "type": "TwitchAPI.js:TwitchAPI"
            },
            {
              "name": "datacollection",
              "type": "DataCollection.js:DataCollection"
            },
            {
              "name": "logger",
              "opt": true,
              "type": "Logger.js:Logger"
            }
          ],
          "description": "Calls the Parent PackageBase class constructor."
        },
        "variables": {
          "RESTRICTED_HTML_HOSTING": {
            "type": "String",
            "description": "Min. Userlevel to Access Restricted Features."
          },
          "Permitted": {
            "type": "Object",
            "description": "All Users that are currently Permitted to Post ANYTHING!"
          },
          "Filters": {
            "type": "Array",
            "description": "All currently installed Chat Moderation Filters."
          }
        },
        "functions": {
          "Init": {
            "params": [
              {
                "name": "WebInter",
                "type": "WebApp::WebInteractor"
              }
            ],
            "is-async": true,
            "description": "Sets up all Filters and Twitch Chat Messagehandlers. Also requests a Package Interconnect to set some Chat Commands."
          },
          "reload": {
            "params": null,
            "is-async": true,
            "description": "Reloads the Filters."
          },
          "MessageEventHandler": {
            "params": [
              {
                "name": "channel",
                "type": "String"
              },
              {
                "name": "userstate",
                "type": "Object"
              },
              {
                "name": "message",
                "type": "String"
              },
              {
                "name": "self",
                "type": "Boolean"
              }
            ],
            "is-async": true,
            "description": "Checks the Message sent in the Chat for any violations by the Filters and punishes that."
          },
          "executePunishment": {
            "params": [
              {
                "name": "msgObj",
                "type": "TwitchIRC.js::Message"
              },
              {
                "name": "issue",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Timeouts/Bans/etc. a User based on the given Issue. This also rends a Chat response when given."
          },
          "sendResponse": {
            "params": [
              {
                "name": "codedString",
                "type": "String"
              },
              {
                "name": "msgObj",
                "type": "TwitchIRC.js::Message"
              }
            ],
            "is-async": true,
            "description": "Send a Chat Response and replace the coded String with Variable Contents."
          },
          "permitUser": {
            "params": [
              {
                "name": "username",
                "type": "String"
              }
            ],
            "description": "Permits a User to write ANYTHING for a minute!"
          },
          "Chat_Command_ChatModeration": {
            "params": [
              {
                "name": "userMessageObj",
                "type": "Object"
              },
              {
                "name": "commandOrigin",
                "type": "Object"
              },
              {
                "name": "parameters",
                "type": "Array"
              }
            ],
            "description": "The !ChatModeration Command."
          },
          "Chat_Command_permit": {
            "params": [
              {
                "name": "userMessageObj",
                "type": "Object"
              },
              {
                "name": "commandOrigin",
                "type": "Object"
              },
              {
                "name": "parameters",
                "type": "Array"
              }
            ],
            "description": "The !permit Command."
          }
        },
        "API": {
          "Endpoints": [
            {
              "name": "Get Filter Settings",
              "endpoint": "/api/ChatModeration/filters/settings",
              "description": "Returns the current Filter Settings.",
              "restriction": "full",
              "request": null,
              "response": {
                "[Filter Name]": {
                  "type": "Object",
                  "description": "Containing the Filter_s Settings."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            },
            {
              "name": "Update Filter Settings",
              "endpoint": "/api/ChatModeration/filters/settings",
              "description": "Returns the current Filter Settings.",
              "restriction": "full",
              "request": {
                "method": "PUT",
                "body": {
                  "name": {
                    "type": "String",
                    "description": "Filter Name to update."
                  },
                  "[Filter Settings]": {
                    "type": "Any",
                    "description": "Every Filter can have its own Body Parameters. Check the Guide for more Info."
                  }
                }
              },
              "response": {
                "updated_settings": {
                  "type": "Object",
                  "description": "Containing the new Filter_s Settings."
                },
                "err": {
                  "type": "String",
                  "description": "Error Text, if something broke or no Data was found."
                }
              }
            }
          ]
        },
        "FileHosting": {
          "ROOT": "ChatModeration/",
          "Routes": {
            "/": {
              "type": "normal",
              "description": "Moderator Restricted Webinterface to Change Filter Settings."
            }
          }
        }
      },
      "Filter": {
        "description": "Filter Parent Class.",
        "constructor": {
          "params": [
            {
              "name": "ChatModeration",
              "type": "ChatModeration"
            },
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "TwitchIRC",
              "type": "TwitchIRC.js:TwitchIRC"
            },
            {
              "name": "TwitchAPI",
              "type": "TwitchAPI.js:TwitchAPI"
            },
            {
              "name": "Logger",
              "type": "Any Logger Object"
            }
          ],
          "description": "Sets up the Filter Settings and Variables."
        },
        "variables": {
          "name": {
            "type": "String",
            "description": "Filter name"
          },
          "ChatModeration": {
            "type": "ChatModeration",
            "description": "ChatModeration Manager Class."
          },
          "Config": {
            "type": "ConfigHandler.js::Config",
            "description": "Settings of the current Filter."
          },
          "TwitchIRC": {
            "type": "TwitchIRC.js:TwitchIRC",
            "description": "Twitch Chat Connection."
          },
          "TwitchAPI": {
            "type": "TwitchAPI.js:TwitchAPI",
            "description": "Twitch API Connection."
          },
          "Logger": {
            "type": "Any Logger Object",
            "description": "Console Logger."
          },
          "READY_REQUIREMENTS": {
            "type": "Array",
            "description": "Collection of Ready Requierement Function."
          }
        },
        "functions": {
          "CheckMessage": {
            "params": [
              {
                "name": "msgObj",
                "type": "Object"
              },
              {
                "name": "streamData",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the given Message for any violations by the Filter."
          },
          "Init": {
            "params": null,
            "is-async": true,
            "description": "Inits the Filter."
          },
          "reload": {
            "params": null,
            "is-async": true,
            "description": "Reloads the Filter."
          },
          "GetName": {
            "params": null,
            "description": "Returns the set Filter name."
          },
          "GetSettings": {
            "params": null,
            "is-async": true,
            "description": "Returns the Filter Settings."
          },
          "ChangeSetting": {
            "params": [
              {
                "name": "req",
                "type": "express.js::Request"
              },
              {
                "name": "res",
                "type": "express.js::Response"
              }
            ],
            "is-async": true,
            "description": "Change Filter Config Settings."
          },
          "enable": {
            "params": null,
            "description": "Enables the Filter."
          },
          "disable": {
            "params": null,
            "description": "Disables the Filter."
          },
          "setEnabled": {
            "params": [
              {
                "name": "state",
                "type": "Boolean"
              }
            ],
            "description": "Set the Enable state of the Filter."
          },
          "isEnabled": {
            "params": null,
            "description": "Returns the current Enable State."
          },
          "CheckOneDBSearch": {
            "params": [
              {
                "name": "db",
                "type": "nedb::Datastore"
              },
              {
                "name": "querry",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Access a NEDB Database asynchronosly."
          },
          "addReadyRequirement": {
            "params": [
              {
                "name": "func",
                "type": "Function"
              }
            ],
            "description": "Add a Ready Requierement Function."
          },
          "removeReadyRequirement": {
            "params": [
              {
                "name": "index",
                "type": "Number"
              }
            ],
            "description": "Remove a Ready Requierement Function at the given Index."
          },
          "isReady": {
            "params": null,
            "description": "Checks all Ready Requierements and returns true when none return false."
          }
        }
      },
      "WordFilter": {
        "description": "Word Filter checking for specific Words on a Blacklist.",
        "parent": {
          "name": "Filter",
          "from": {
            "name": "ChatModeration",
            "type": "FrikyBot Module"
          }
        },
        "constructor": {
          "params": [
            {
              "name": "ChatModeration",
              "type": "ChatModeration"
            },
            {
              "name": "TwitchIRC",
              "type": "TwitchIRC.js:TwitchIRC"
            },
            {
              "name": "TwitchAPI",
              "type": "TwitchAPI.js:TwitchAPI"
            },
            {
              "name": "Logger",
              "type": "Any Logger Object"
            }
          ],
          "description": "Just calles the Parent constructor and loads the Blacklist Database."
        },
        "variables": {
          "Blacklist": {
            "type": "nedb::Datastore",
            "description": "Blacklist containing the Word Data."
          }
        },
        "functions": {
          "Init": {
            "params": null,
            "is-async": true,
            "description": "Create File Structure."
          },
          "reload": {
            "params": null,
            "is-async": true,
            "description": "Reloads the Blacklist Database."
          },
          "GetSettings": {
            "params": null,
            "is-async": true,
            "description": "Returns the Filter Config and Ready state."
          },
          "ChangeSetting": {
            "params": [
              {
                "name": "req",
                "type": "express.js::Request"
              },
              {
                "name": "res",
                "type": "express.js::Response"
              }
            ],
            "is-async": true,
            "description": "Change Filter Config Settings."
          },
          "CheckMessage": {
            "params": [
              {
                "name": "msgObj",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the given Message for any violations by the Filter."
          },
          "addWord": {
            "params": [
              {
                "name": "word",
                "type": "String"
              },
              {
                "name": "casesensitive",
                "default": true,
                "type": "Boolean"
              },
              {
                "name": "in_word_use",
                "default": true,
                "type": "Boolean"
              },
              {
                "name": "block_patterns",
                "default": true,
                "type": "Boolean"
              },
              {
                "name": "ignore_emotes",
                "default": true,
                "type": "Boolean"
              },
              {
                "name": "emote_only",
                "default": false,
                "type": "Boolean"
              },
              {
                "name": "include_BTTV",
                "default": false,
                "type": "Boolean"
              },
              {
                "name": "include_FFZ",
                "default": false,
                "type": "Boolean"
              },
              {
                "name": "username",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Adds a Word with the given Restrictions to the Blacklist."
          },
          "removeWord": {
            "params": [
              {
                "name": "word",
                "type": "String"
              }
            ],
            "is-async": true,
            "description": "Removes a Word from the Blacklist."
          },
          "clearBlacklist": {
            "params": null,
            "is-async": true,
            "description": "Removes all Words from the Blacklist."
          }
        }
      },
      "SpamFilter": {
        "description": "Spam Filter Checking repetitive Chars/Emotes/... in the Message.",
        "constructor": {
          "params": [
            {
              "name": "ChatModeration",
              "type": "ChatModeration"
            },
            {
              "name": "TwitchIRC",
              "type": "TwitchIRC.js:TwitchIRC"
            },
            {
              "name": "TwitchAPI",
              "type": "TwitchAPI.js:TwitchAPI"
            },
            {
              "name": "Logger",
              "type": "Any Logger Object"
            }
          ],
          "description": "Calles the Parent Constructor and collects the BTTV and FFZ Emotes of the current Channel."
        },
        "variables": {
          "Caps_Config": {
            "type": "ConfigHandler.js::Config",
            "description": "Settings of Caps Filtering."
          },
          "Emotes_Config": {
            "type": "ConfigHandler.js::Config",
            "description": "Settings of Emote Filtering."
          },
          "Patterns_Config": {
            "type": "ConfigHandler.js::Config",
            "description": "Settings of Pattern Filtering."
          },
          "Messages_Config": {
            "type": "ConfigHandler.js::Config",
            "description": "Settings of Message Filtering."
          },
          "BTTV_Emotes": {
            "type": "Array",
            "description": "Collection of all BTTV Emotes."
          },
          "FFZ_Emotes": {
            "type": "Array",
            "description": "Collection of all FFZ Emotes."
          }
        },
        "functions": {
          "reload": {
            "params": null,
            "is-async": true,
            "description": "Reloads the BTTV/FFZ Emote Lists."
          },
          "GetSettings": {
            "params": null,
            "is-async": true,
            "description": "Returns the Filter Config and Ready state."
          },
          "ChangeSetting": {
            "params": [
              {
                "name": "req",
                "type": "express.js::Request"
              },
              {
                "name": "res",
                "type": "express.js::Response"
              }
            ],
            "is-async": true,
            "description": "Change Filter Config Settings."
          },
          "CheckMessage": {
            "params": [
              {
                "name": "msgObj",
                "type": "Object"
              },
              {
                "name": "streamData",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the given Message for any violations by the Filter."
          },
          "Check_Symbols_Caps": {
            "params": [
              {
                "name": "msgObj",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the given Message for any Caps Violations."
          },
          "Check_Symbols_Patterns": {
            "params": [
              {
                "name": "msgObj",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the given Message for any Pattern Violations."
          },
          "Check_Symbols_Emotes": {
            "params": [
              {
                "name": "msgObj",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the given Message for any Emote Violations."
          },
          "Check_Message_Length": {
            "params": [
              {
                "name": "msgObj",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the given Message for Length Violations."
          }
        }
      },
      "LinkFilter": {
        "description": "Link Filter checking the Messages for Links.",
        "constructor": {
          "params": [
            {
              "name": "ChatModeration",
              "type": "ChatModeration"
            },
            {
              "name": "TwitchIRC",
              "type": "TwitchIRC.js:TwitchIRC"
            },
            {
              "name": "TwitchAPI",
              "type": "TwitchAPI.js:TwitchAPI"
            },
            {
              "name": "Logger",
              "type": "Any Logger Object"
            }
          ],
          "description": "Calles the Parent Constructor and Sets up the Blacklist and Whitelist."
        },
        "variables": {
          "Whitelist": {
            "type": "NEDB Datastore",
            "description": "Collection of Whitelisted Links."
          },
          "Blacklist": {
            "type": "NEDB Datastore",
            "description": "Collection of Blacklisted Links."
          }
        },
        "functions": {
          "Init": {
            "params": null,
            "is-async": true,
            "description": "Create File Structure."
          },
          "reload": {
            "params": null,
            "is-async": true,
            "description": "Reloads the Whitelist and Blacklist Databases."
          },
          "GetSettings": {
            "params": null,
            "is-async": true,
            "description": "Returns the Filter Config and Ready state."
          },
          "ChangeSetting": {
            "params": [
              {
                "name": "req",
                "type": "express.js::Request"
              },
              {
                "name": "res",
                "type": "express.js::Response"
              }
            ],
            "is-async": true,
            "description": "Change Filter Config Settings."
          },
          "CheckMessage": {
            "params": [
              {
                "name": "msgObj",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "Checks the given Message for any violations by the Filter."
          },
          "findLinks": {
            "params": [
              {
                "name": "messageString",
                "type": "String"
              }
            ],
            "description": "Checks the given Message for any Links and removes any \"http://\" / \"https://\" or \"www.\" ."
          },
          "getDomain": {
            "params": [
              {
                "name": "URL",
                "type": "String"
              }
            ],
            "description": "Returns the Domain Name of the given URL."
          },
          "getSubDomain": {
            "params": [
              {
                "name": "URL",
                "type": "String"
              }
            ],
            "description": "Returns the SubDomain Name of the given URL."
          },
          "blockURL": {
            "params": [
              {
                "name": "url_data",
                "type": "Object"
              },
              {
                "name": "by",
                "type": "String"
              },
              {
                "name": "at",
                "type": "Number"
              }
            ],
            "is-async": true,
            "description": "Blocks the given URL Data. This can be just a specific URL, only a subdomain or a whole Domain."
          },
          "unblockURL": {
            "params": [
              {
                "name": "url_data",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "UnBlocks the given URL Data. This can be just a specific URL, only a subdomain or a whole Domain."
          },
          "clearBlacklist": {
            "params": null,
            "is-async": true,
            "description": "Removes all entries in the Blacklist."
          },
          "allowURL": {
            "params": [
              {
                "name": "url_data",
                "type": "Object"
              },
              {
                "name": "by",
                "type": "String"
              },
              {
                "name": "at",
                "type": "Number"
              }
            ],
            "is-async": true,
            "description": "Allows the given URL Data. This can be just a specific URL, only a subdomain or a whole Domain."
          },
          "unallowURL": {
            "params": [
              {
                "name": "url_data",
                "type": "Object"
              }
            ],
            "is-async": true,
            "description": "UnAllows the given URL Data. This can be just a specific URL, only a subdomain or a whole Domain."
          },
          "clearWhitelist": {
            "params": null,
            "is-async": true,
            "description": "Removes all entries in the Whitelist."
          }
        }
      }
    },
    "exports": {
      "ChatModeration": "ChatModeration"
    }
  }
}